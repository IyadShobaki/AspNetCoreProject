@page "/Order/List/{Id:int}"
@page "/Order/List"

@inject HttpClient Http
@inject AutoMapper.IMapper Mapper
@inject NavigationManager navigationManager



<h3>Display</h3>

@if (recordNotFound)
{
    <h4>No record found</h4>
}
else if (order is null)
{
    <h4>Record Loading...</h4>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <td><strong>Order Name</strong></td>
                <td>@order.OrderName</td>
            </tr>
            <tr>
                <td><strong>Order Date</strong></td>
                <td>@order.OrderDate</td>
            </tr>
            <tr>
                <td><strong>Order Total</strong></td>
                <td>@string.Format("{0:C}", order.Total)</td>
            </tr>
            <tr>
                <td><strong>Item Ordered</strong></td>
                <td>@itemPurchased</td>
            </tr>
            <tr>
                <td><strong>Quantity Ordered</strong></td>
                <td>@order.Quantity</td>
            </tr>
            <tr>
                <td colspan="2">
                    @if (confirmDelete)
                    {
                        <button class="btn btn-outline-danger" @onclick="HandleDeleteRecord">
                            Confirm Delete
                        </button>
                        <button class="btn btn-secondary" @onclick="(() => confirmDelete = false)">
                            Cancel
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="(() => confirmDelete = true)">
                            Delete Order
                        </button>
                    }
                </td>
            </tr>
        </tbody>
    </table>
    <EditForm Model="@updateModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary Model="@updateModel" />
            <div class="form-group">
                <label class="control-label">Name for the Order</label>
                <InputText @bind-Value="updateModel.OrderName" class="form-control" />
                <ValidationMessage For="@(() => updateModel.OrderName)" class="text-danger" />
            </div>
            <div class="form-group">
                <input type="submit" value="Update Order Name" class="btn btn-primary" />
            </div>
        </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private OrderUIModel order;
    private List<OrderModel> orderData = new List<OrderModel>();
    private string itemPurchased;
    private bool confirmDelete = false;
    private bool recordNotFound = false;
    private OrderUpdateModel updateModel = new OrderUpdateModel();

    private const string APIServer = "https://localhost:44369/api/";

    protected override async Task OnInitializedAsync()
    {
        order = new OrderUIModel();

        orderData = await Http.GetJsonAsync<List<OrderModel>>(APIServer + "order");

        OrderModel o = orderData.Where(x => x.Id == Id).FirstOrDefault();

        Mapper.Map(o, order);

        if (order != null)
        {
            var food = await Http.GetJsonAsync<List<FoodUIModel>>(APIServer + "food");

            itemPurchased = food.Where(x => x.Id == order.FoodId)
                                .FirstOrDefault()?.Title;

            updateModel.Id = order.Id;
            updateModel.OrderName = order.OrderName;
        }
        else
        {
            recordNotFound = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        await Http.PutJsonAsync(APIServer + "order", updateModel);
        // instead of send it to the databse and return it back
        order.OrderName = updateModel.OrderName;
    }

    private async Task HandleDeleteRecord()
    {
        await Http.DeleteAsync(APIServer + "order/" + Id);
        navigationManager.NavigateTo("food/list");
    }
}